<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task.xsd">
	<tx:annotation-driven />   <!--启用注解事务 -->
	<task:annotation-driven /> <!--启用注解任务  -->	
    <aop:aspectj-autoproxy/><!-- 启用@Aspect支持 -->
	<context:annotation-config />
	<!--扫描指定包，与注解搭配使用  -->
	<context:component-scan base-package="com.main.*,cn.service.*" />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:asuren.properties</value>
				<value>classpath:log4j.properties</value>
			</list>
		</property>
	</bean>
	
	<!--定义数据源  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 声明事务 -->	
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!--定义sqlSessionFactory -->
	<!-- 定义Mapper文件的扫描位置或者直接引用Mybatis的配置文件，在Mybitis的配置文件中配置 -->	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:mappers/*.xml"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<!--自动映射不用再写dao的实现类  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.main.**.dao,cn.service.**.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

	<!-- 定义事务开启的方法 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="load*" read-only="true" rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="get*" read-only="true" rollback-for="Exception" />
			<tx:method name="find*" read-only="true" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 事务层级的声明 -->
	<aop:config>
		<aop:pointcut id="BussessServiceOperation"
			expression="execution(public * *..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="BussessServiceOperation" />
	</aop:config>

   
    <!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
    <!-- 配置切面类 -->
    <!--<bean id="helloAspectBean" class="cn.service.common.aspect.HelloAspect" />
    &lt;!&ndash; 配置一个切面 &ndash;&gt;
    <aop:config>
        <aop:aspect id="helloAspect" ref="helloAspectBean">
        	&lt;!&ndash; <aop:pointcut id="helloServicePointcut" expression="(execution(* cn.service.modules.*.service.*.*(..)) and execution(* com.main.modules.*.service.*.*(..)))" />  &ndash;&gt;
            <aop:pointcut id="helloServicePointcut" expression="execution(* cn.service.modules.*.service.*.*(..))" />        	
            &lt;!&ndash; 配置前置通知 &ndash;&gt;
            <aop:before pointcut-ref="helloServicePointcut" method="beforeAdvice" />
            &lt;!&ndash; 配置后置通知 &ndash;&gt;
            <aop:after pointcut-ref="helloServicePointcut" method="afterAdvice" />
            &lt;!&ndash; 配置后置返回通知 &ndash;&gt;
            <aop:after-returning pointcut-ref="helloServicePointcut" method="afterReturnAdvice" returning="result" />
            &lt;!&ndash; 配置环绕通知 &ndash;&gt;
            <aop:around pointcut-ref="helloServicePointcut" method="aroundAdvice" />
            &lt;!&ndash; 异常通知 &ndash;&gt;
            <aop:after-throwing pointcut-ref="helloServicePointcut" method="throwingAdvice" throwing="e" />
        </aop:aspect>
    </aop:config>
-->


	<!--配置 发射器-->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
			<property name="host" value="smtp.qq.com"></property>
			<property name="port" value="25"></property>
			<property name="username" value="登录帐号xxx"></property>
			<property name="password" value="密码xxxx"></property>
			<property name="protocol" value="smtp"></property>
			<property name="defaultEncoding" value="utf-8"></property>
			<property name="javaMailProperties">
				<props>
					<prop key="mail.smtp.auth">true</prop>
				</props>
			</property>
	</bean> -->
	<!--配置 解析器-->
	<!-- <bean id="freemakercfg" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		value 是 ftl 文件 的 目录
		<property name="templateLoaderPath" value="com/template"></property>  
		<property name="freemarkerSettings">
			<props>
				<prop key="default_encoding">UTF-8</prop>
			</props>
		</property>
	</bean> -->
	
</beans>